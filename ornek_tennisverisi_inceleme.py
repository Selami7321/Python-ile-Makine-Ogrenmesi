# -*- coding: utf-8 -*-
"""Ornek_TennisVerisi_Inceleme.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14nyVblYZAn_WFeVM8IUN9CoPEATghkUU

HAZIRLAYAN : Selami Çetin Yazılım Mühendisi
"""

"""
Created on Monday April 21 04:18:20 2025

"""

#1. kutuphaneler
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

#2. Veri Onisleme

#2.1. Veri Yukleme
veriler = pd.read_csv('odev_tenis.csv')
#pd.read_csv("veriler.csv")

#Verileri dönüştürelim (Play Sütunu)
play=veriler.iloc[:, -1 : ]
print(play)

from sklearn import preprocessing
le = preprocessing.LabelEncoder()
play=le.fit_transform(play)
print(play)

#Windy Sütunu
windy=veriler.iloc[: ,3:4]
print(windy)

le = preprocessing.LabelEncoder()
windy= le.fit_transform(windy)
print(windy)



#Encoder Kategorik->Numeric

from sklearn import preprocessing
veriler2= veriler.apply(preprocessing.LabelEncoder().fit_transform)
print(veriler2)
#veri on isleme

from sklearn.preprocessing import LabelEncoder
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder

# Tüm verileri LabelEncoder ile sayısala çevir
veriler2 = veriler.apply(LabelEncoder().fit_transform)

# İlk sütun (ülke) kategorik olduğu varsayılıyor
c = veriler2.iloc[:, :1]

# OneHotEncoder ile dönüşüm
ct = ColumnTransformer(
    transformers=[('encoder', OneHotEncoder(), [0])],
    remainder='passthrough'
)

c = ct.fit_transform(c)  # Bu dönüşüm zaten NumPy array olarak döner

print(c)


havadurumu = pd.DataFrame(data = c, index = range(14), columns=['o','r','s'])
sonveriler = pd.concat([havadurumu,veriler.iloc[:,1:3]],axis = 1)
sonveriler = pd.concat([veriler2.iloc[:,-2:],sonveriler], axis = 1)


#verilerin egitim ve test icin bolunmesi
from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(
    sonveriler.iloc[:, :-1],
    sonveriler.iloc[:, -1:],
    test_size=0.33,
    random_state=0
)


from sklearn.linear_model import LinearRegression
regressor = LinearRegression()
regressor.fit(x_train,y_train)


y_pred = regressor.predict(x_test)

print(y_pred)

import statsmodels.api as sm

X = np.append(arr = np.ones((14,1)).astype(int), values=sonveriler.iloc[:,:-1], axis=1 )
X_l = sonveriler.iloc[:,[0,1,2,3,4,5]].values
r_ols = sm.OLS(endog = sonveriler.iloc[:,-1:], exog =X_l)
r = r_ols.fit()
print(r.summary())

sonveriler = sonveriler.iloc[:,1:]

import statsmodels.api as sm
X = np.append(arr = np.ones((14,1)).astype(int), values=sonveriler.iloc[:,:-1], axis=1 )
X_l = sonveriler.iloc[:,[0,1,2,3,4]].values
r_ols = sm.OLS(endog = sonveriler.iloc[:,-1:], exog =X_l)
r = r_ols.fit()
print(r.summary())


#Backward Elimination
import statsmodels.api as sm
X=np.append(arr = np.ones((14,1)).astype(int) , values = sonveriler.iloc[:, :-1],axis=1)
X_l=sonveriler.iloc[:,[1,2,3]].values
X_l=np.array(X_l,dtype=float)
y = sonveriler.iloc[:, 0].values            # Bağımlı değişken (örnek: nem)

X_l = sm.add_constant(X_l)  # Sabit (bias) ekler: y = b0 + b1*x1 + b2*x2 + ...
model = sm.OLS(endog=y, exog=X_l)
model_ols = model.fit()

x_train = x_train.iloc[:,1:]
x_test = x_test.iloc[:,1:]

regressor.fit(x_train,y_train)


y_pred = regressor.predict(x_test)


# X1 satırını atalım
import statsmodels.api as sm
X = np.append(arr = np.ones((14,1)).astype(int), values=sonveriler.iloc[:,:-1], axis=1 )
X_l = sonveriler.iloc[:,[0,1,2,3,4]].values
r_ols = sm.OLS(endog = sonveriler.iloc[:,-1:], exog =X_l)
r = r_ols.fit()
print(r.summary())

sonveriler=sonveriler.iloc[: ,2:]
#Tekrar bir Backword Elimination Yapalım
# En iyi pt değerini veren Backword Elimination modeli
import statsmodels.api as sm
X = np.append(arr = np.ones((14,1)).astype(int), values=sonveriler.iloc[:,:-1], axis=1 )
X_l = sonveriler.iloc[:,[0,2]].values
r_ols = sm.OLS(endog = sonveriler.iloc[:,-1:], exog =X_l)
r = r_ols.fit()
print(r.summary())

#Linear Regression
from sklearn.linear_model import LinearRegression
lr=LinearRegression()
lr.fit(x_train,y_train)
print(lr.predict(x_test))

