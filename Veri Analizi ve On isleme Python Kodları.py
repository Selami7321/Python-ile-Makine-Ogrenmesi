# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1L9wC4tFvGf3klv1KNOtcghcCTW4Z_BYH
"""

# -*- coding: utf-8 -*-
"""
Created on Mon Jul  6 18:50:13 2020

@author: sadievrenseker
"""

#kutuphaneler
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

#kodlar
#veri yukleme

veriler = pd.read_csv('eksikveriler.csv')
#pd.read_csv("veriler.csv")

#print(veriler)

#veri on isleme

boy = veriler[['boy']]
#print(boy)

boykilo = veriler[['boy','kilo']]
#print(boykilo)

x = 10

class insan:
    boy = 180
    def kosmak(self,b):
        return b + 10

ali = insan()
#print(ali.boy)
#print(ali.kosmak(90))

#eksik veriler
#sci - kit learn

from sklearn.impute import SimpleImputer

imputer = SimpleImputer(missing_values=np.nan, strategy='mean')

Yas = veriler.iloc[:,1:4].values
#print(Yas)
imputer = imputer.fit(Yas[:,1:4])
Yas[:,1:4] = imputer.transform(Yas[:,1:4])
#print(Yas)

ulke=veriler.iloc[:,0:1].values
print(ulke)


from sklearn import preprocessing
le=preprocessing.LabelEncoder()

ulke[:,0] =le.fit_transform(veriler.iloc[:, 0])
print(ulke)

ohe = preprocessing.OneHotEncoder()
ulke=ohe.fit_transform(ulke).toarray()
print(ulke)


print(list(range(22)))
sonuc=pd.DataFrame(data= ulke , index=range(22), columns=['us','fr','tr'])
print(sonuc)

sonuc2=pd.DataFrame(data= Yas , index= range(22),columns=['boy','kilo','yas'])
print(sonuc2)

cinsiyet=veriler.iloc[:,-1].values
print(cinsiyet)
sonuc3=pd.DataFrame(data=cinsiyet, index=range(22),columns=['cinsiyet'])
print(sonuc3)

birlestirme = pd.concat([sonuc,sonuc2],axis=1)
print(birlestirme)


birlestirme2=pd.concat([sonuc,sonuc3] , axis=1).to_csv('sonuc2.csv')
print(birlestirme2)

#-------------------------------------------
#Veri Seti Bölme
from sklearn.model_selection import train_test_split
x_train , x_test ,y_train ,y_test =train_test_split(birlestirme, cinsiyet,test_size=0.35,random_state=12)
print(x_train)
#Gerçek Değerler
print(x_test)
#Test Değerleri
print(y_train)
#Gerçek Değerler
print(y_test)
#Test Değerleri

"""Öznitelik Ölçekleme"""

# -*- coding: utf-8 -*-
"""
Created on Tue April  6 18:50:13 2025

@author: Selami Çetin
"""

#kutuphaneler
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

#kodlar
#veri yukleme

veriler = pd.read_csv('eksikveriler.csv')
#pd.read_csv("veriler.csv")

#print(veriler)

#veri on isleme

boy = veriler[['boy']]
#print(boy)

boykilo = veriler[['boy','kilo']]
#print(boykilo)

x = 10

class insan:
    boy = 180
    def kosmak(self,b):
        return b + 10

ali = insan()
#print(ali.boy)
#print(ali.kosmak(90))

#eksik veriler
#sci - kit learn

from sklearn.impute import SimpleImputer

imputer = SimpleImputer(missing_values=np.nan, strategy='mean')

#Kategorik veriler ->encoding

Yas = veriler.iloc[:,1:4].values
#print(Yas)
imputer = imputer.fit(Yas[:,1:4])
Yas[:,1:4] = imputer.transform(Yas[:,1:4])
#print(Yas)

ulke=veriler.iloc[:,0:1].values
print(ulke)


from sklearn import preprocessing
le=preprocessing.LabelEncoder()

ulke[:,0] =le.fit_transform(veriler.iloc[:, 0])
print(ulke)

ohe = preprocessing.OneHotEncoder()
ulke=ohe.fit_transform(ulke).toarray()
print(ulke)


print(list(range(22)))
sonuc=pd.DataFrame(data= ulke , index=range(22), columns=['us','fr','tr'])
print(sonuc)

sonuc2=pd.DataFrame(data= Yas , index= range(22),columns=['boy','kilo','yas'])
print(sonuc2)

cinsiyet=veriler.iloc[:,-1].values
print(cinsiyet)
sonuc3=pd.DataFrame(data=cinsiyet, index=range(22),columns=['cinsiyet'])
print(sonuc3)

birlestirme = pd.concat([sonuc,sonuc2],axis=1)
print(birlestirme)


birlestirme2=pd.concat([sonuc,sonuc3] , axis=1).to_csv('sonuc2.csv')
print(birlestirme2)

#-------------------------------------------
#Veri Seti Bölme
from sklearn.model_selection import train_test_split
x_train , x_test ,y_train ,y_test =train_test_split(birlestirme, cinsiyet,test_size=0.35,random_state=12)
print(x_train)
#Gerçek Değerler
print(x_test)
#Test Değerleri
print(y_train)
#Gerçek Değerler
print(y_test)
#Test Değerleri




#--------------------------------------------------------

from sklearn.preprocessing import StandardScaler # Changed 'StandartScaler' to 'StandardScaler'
sc=StandardScaler()
X_train=sc.fit_transform(x_train)
X_test=sc.fit_transform(x_test)
# It's generally not recommended to scale the target variables (Y_train, Y_test)
# especially for classification problems.
# If you need to scale them for a specific reason, please provide more context.
#Y_train=sc.fit_transform(y_train)
#Y_test=sc.fit_transform(y_test)