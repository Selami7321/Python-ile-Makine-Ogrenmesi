# -*- coding: utf-8 -*-
"""Çoklu  Değişken için veri Hazırlama.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TcFdCWMG37tXrRpw3nrUuTnupRbzAtuw

HAZIRLAYAN: SELAMİ ÇETİN  YAZILIM MÜHENDİSİ

Bu kod örneğimizde artık çoklu değişkenlerimiz olduğunda bunlarla ana değişken arasındaki tahminlemeyi inceleyeceğiz
"""

# 1. Kütüphaneler
import numpy as np
import pandas as pd
from sklearn.preprocessing import LabelEncoder, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression, LinearRegression

# 2. Veri Yükleme
veriler = pd.read_csv('veriler.csv')
print(veriler)

# 3. Ülke kolonunu al (ilk sütun)
ulke = veriler.iloc[:, 0:1].values  # [[Türkiye], [Fransa], [ABD], ...]

# OneHotEncoder ile ülke kolonunu dönüştür
ct = ColumnTransformer(
    [('ulke_encoder', OneHotEncoder(), [0])], remainder='passthrough'
)
ulke_encoded = ct.fit_transform(ulke)

# 4. Sayısal verileri al (boy, kilo, yaş): 1. 2. ve 3. sütun
vitals = veriler.iloc[:, 1:4].values

# 5. Cinsiyet kolonunu al ve LabelEncoder ile sayıya çevir
cinsiyet = veriler.iloc[:, -1].values  # 'e' ve 'k' değerleri
le = LabelEncoder()
cinsiyet_encoded = le.fit_transform(cinsiyet)  # 'e'→1, 'k'→0

# 6. Tüm veriyi birleştir (ülke + vitals)
X = np.concatenate((ulke_encoded, vitals), axis=1)
y = cinsiyet_encoded

# 7. Eğitim ve test bölmesi
x_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=0)

# 8. Ölçekleme
sc = StandardScaler()
X_train = sc.fit_transform(x_train)
X_test = sc.transform(x_test)

# 9. Lojistik Regresyon
logr = LogisticRegression(random_state=0)
logr.fit(X_train, y_train)

# 10. Tahmin
y_pred = logr.predict(X_test)

print("Tahmin Edilen:", y_pred)
print("Gerçek Değerler:", y_test)

# 11. Ekstra: Linear Regression örneği (sadece sayısal verilerle)
lin_reg = LinearRegression()
lin_reg.fit(x_train, y_train)
print("Linear Regression Tahmin:", lin_reg.predict(x_test))



from sklearn.linear_model import LinearRegression
regressor = LinearRegression()
regressor.fit(x_test,y_test)

print("Linear Regression : " , regressor.predict(x_test))
print("Linear Regresion 2  : " , regressor.predict(x_train))


#boy sütünunu alalım
boy= veriler.iloc[: , 1:2]
print(boy)

#Boy sütununun solundaki sutunları alalım
sol= veriler.iloc[: , :1]
#Boy sütunun sağındaki değerleri alalım
sag = veriler.iloc[ : , 2:]

print(sol)
print(sag)


veri2= pd.concat([sol,sag], axis=1)
print(veri)


#Oluşturduğumuz Verimizi eğitelim
x_train, x_test , y_train , y_test = train_test_split(veri2 , boy, test_size=0.29 , random_state=0)
print(x_train)
print(y_train)



regressor2=LinearRegression()
#regressor2.fit(x_train,y_train)
#y_pred=regressor2.predict(x_test)
print(y_pred)

from sklearn.preprocessing import LabelEncoder

# Ülke sütununu dönüştür (sütun 0 olabilir)
le_ulke = LabelEncoder()
veri2.iloc[:, 0] = le_ulke.fit_transform(veri2.iloc[:, 0]) #0. sütün ülke

# Cinsiyet sütununu dönüştür (sütun 4 olabilir)
le_cinsiyet = LabelEncoder()
veri2.iloc[:, 3] = le_cinsiyet.fit_transform(veri2.iloc[:, 3]) # 4.sutun cinsiyet



#Backward Elimination
import statsmodels.api as sm
X= np.append(arr=np.ones((22,1)).astype(int), values=veri2 , axis=1)

X_l= veri2.iloc[: ,[0,1,2,3]].values
X_l= np.array(X_l,dtype=float)
model=sm.OLS(boy,X_l).fit()
print(model.summary())


X_l= veri2.iloc[: ,[0,1,3]].values
X_l= np.array(X_l,dtype=float)
model=sm.OLS(boy,X_l).fit()
print(model.summary())

